{
    "replace three dots by an ellipsis": {
        "enabled": true,
        "regexp": "\\.\\.\\.",
        "replacement": "…"
    },
    "avoid orphan 'a's": {
        "enabled": true,
        "regexp": "(\\ba)\\s(\\w+\\b)",
        "replacement": "$1 $2"
    },
    "don't break :-) :-( :-D :-| :-P :-p etc.": {
        "enabled": true,
        "regexp": "([\\:|;])(\\-)([\\)|\\(|\\|D||p|P])",
        "replacement": "$1﻿$2﻿$3"
    },
    "\"who to follow\" to \"whom to follow\"": {
        "enabled": true,
        "regexp": "\\b(who)(\\s+to\\s+follow)\\b",
        "replacement": "$1m$2"
    },
    "correct ambidextrous double quotes to curved quotes": {
        "enabled": true,
        "regexp": "\"([^\"]+)\"",
        "replacement": "“$1”"
    },
    "replaces hyphens by figure dashes in phone numbers": {
        "enabled": true,
        "regexp": "\\d+-(?:\\d+-)+\\d+",
        "replacement": "function(original) {\n\treturn original.replace(/-/g, '\\u2012');\n}"
    },
    "numeric ranges should be separated by an en dash instead of a hyphen": {
        "enabled": true,
        "regexp": "(\\d+)-(\\d+)",
        "replacement": "$1–$2"
    },
    "turn \"[adjective]-ass [noun]\" into \"[adjective] ass-[noun]\"": {
        "enabled": true,
        "regexp": "(\\w+)-(ass)(\\s+)(\\w+)",
        "replacement": "function(original, adjective, ass, space, noun) {\n\ttagger = new POSTagger();\n\t// is the first word really an adjective and the second really a noun?\n\tvar taggedWords = tagger.tag([adjective.toLowerCase(), noun]);\n\tif ((taggedWords[0][1].match(/^JJ$/)) &&\n\t\t(taggedWords[1][1].match(/^NN|^VBG$/))) {\n\t\t// then replace from \"smart-ass car\" to \"smart ass-car\"\n\t\treturn adjective + space + ass + '-' + noun;\n\t} else {\n\t\t// otherwise, don't change anything\n\t\treturn original;\n\t}\n}"
    },
    "add an Oxford comma to \"Huey, Dewey and Louie\"": {
        "enabled": true,
        "regexp": "(\\w+)\\,\\s+(\\w+)\\s+(and|or|nor)\\s+(\\w+)",
        "replacement": "function(original, noun1, noun2, conjunction, noun3) {\n\ttagger = new POSTagger();\n\tvar taggedWords = tagger.tag([noun1, noun2, noun3]);\n\tconsole.log(taggedWords);\n\t// noun, noun, and noun\n\tif ((taggedWords[0][1].match(/^NN|^VBG$/)) &&\n\t\t\t(taggedWords[1][1].match(/^NN|^VBG$/)) &&\n\t\t\t(taggedWords[2][1].match(/^NN|^VBG$/))) {\t\t\t\t\t\n\t\treturn noun1 + ', ' + noun2 + ', ' + conjunction + ' ' + noun3;\n\t// adjective, adjective, and adjective\t\n\t} else if ((taggedWords[0][1].match(/^JJ/)) &&\n\t\t\t\t\t\t (taggedWords[1][1].match(/^JJ/)) &&\n\t\t\t\t\t\t (taggedWords[2][1].match(/^JJ/))) {\n\t\treturn noun1 + ', ' + noun2 + ', ' + conjunction + ' ' + noun3;\n\t// verb, verb, and verb\t\n\t} else if ((taggedWords[0][1].match(/^VB/)) &&\n\t\t\t\t\t\t (taggedWords[1][1].match(/^VB/)) &&\n\t\t\t\t\t\t (taggedWords[2][1].match(/^VB/))) {\n\t\treturn noun1 + ', ' + noun2 + ', ' + conjunction + ' ' + noun3;\n\t} else {\n\t\t// otherwise, don't change anything\n\t\treturn original;\n\t}\n}"
    }
}